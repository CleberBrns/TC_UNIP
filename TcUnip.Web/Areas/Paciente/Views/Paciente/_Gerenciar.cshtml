@model TcUnip.Model.Cadastro.PacienteModel

@using TcUnip.Web.Models.Local;

@{
    var listStatus = (IList<DataSelectControl>)ViewBag.ListStatus;
    var user = (TcUnip.Model.Cadastro.UsuarioModel)ViewBag.Usuario;
}

@if (user != null)
{
    using (Html.BeginForm())
    {
        <div class="form-horizontal">
            <input type="hidden" name="Id" value=@Model.Id>
            @if (!string.IsNullOrEmpty(Model.Pessoa.Cpf))
            {
                <input type="hidden" name="Cpf" value=@Model.Pessoa.Cpf>                
            }

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="campos" style="padding: 2% 0 2% 5%">
                <div class="form-group">
                    @Html.Label("Nome", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="nome" 
                               name="Pessoa.Nome" value="@Model.Pessoa.Nome" />
                        <span class="field-validation-valid text-danger" id="validaNome" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("CPF", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        @if (string.IsNullOrEmpty(Model.Pessoa.Cpf))
                        {
                            <input type="text" autocomplete="off" class="form-control" id="cpf" 
                                   name="Pessoa.Cpf" value="@Model.Pessoa.Cpf" style="width: 40%" />
                        }
                        else
                        {
                            <input type="text" autocomplete="off" class="form-control" id="cpf" 
                                   name="Pessoa.Cpf" value="@Model.Pessoa.Cpf" style="width: 40%" />
                        }
                        <span class="field-validation-valid text-danger" id="validaCpf" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("E-mail", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="email" 
                               name="Pessoa.Email" value="@Model.Pessoa.Email" />
                        <span class="field-validation-valid text-danger" id="validaEmail" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Endereço", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="endereco" 
                               name="Pessoa.Logradouro" value="@Model.Pessoa.Logradouro" />
                        <span class="field-validation-valid text-danger" id="validaEndereco" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Cep", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="cep" 
                               name="Pessoa.Cep" value="@Model.Pessoa.Cep" style="width: 30%" />
                        <span class="field-validation-valid text-danger" id="validaCep" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Complemento", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="complemento" 
                               name="Pessoa.Complemento" value="@Model.Pessoa.Complemento" />
                        <span class="field-validation-valid text-danger" id="validaComplemento" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Telefone", htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-8">
                        <input type="text" autocomplete="off" class="form-control" id="telefone" 
                               name="Pessoa.Telefone" value="@Model.Pessoa.Telefone" style="width: 40%" />
                        <span class="field-validation-valid text-danger" id="validaTelefone" data-valmsg-replace="true"></span>
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        @Html.Label("Situação", htmlAttributes: new { @class = "control-label col-md-3" })
                    </div>
                    <div class="col-md-8">
                        <select class="form-control" id="status" name="Ativo" style="width: 42%">
                            <option value="0">-- Selecione --</option>
                            @foreach (var item in listStatus)
                            {
                                if (Model.Ativo == Convert.ToBoolean(item.IntValue))
                                {
                                    <option value="@item.IntValue" selected="selected">@item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.IntValue">@item.Name</option>
                                }
                            }
                        </select>
                        <span class="field-validation-valid text-danger" id="validaStatus" data-valmsg-replace="true"></span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="text-right col-md-12">
                    <button type="button" class="btn btn-primary" id="btnRetornar" name="btnRetornar" onclick="pacienteGerenciar.closeModal()">
                        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>Retornar
                    </button>
                    <button type="button" class="btn btn-primary" id="btnSalvar">
                        Salvar <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        </div>
    }

    <script>

    var SPMaskBehavior = function (val) {
        return val.replace(/\D/g, '').length === 11 ? '(00) 00000-0000' : '(00) 0000-00009';
    },
    spOptions = {
        onKeyPress: function (val, e, field, options) {
            field.mask(SPMaskBehavior.apply({}, arguments), options);
        }
    };

    $("#telefone").mask(SPMaskBehavior, spOptions);

    $("#cpf").mask("999.999.999-99");
    $("#cep").mask("99999-999");

    $("#btnSalvar").on('click', function () {
        if (pacienteGerenciar.validar())
            pacienteGerenciar.salvar();
    });

    var pacienteGerenciar = {

        salvar: function () {

            //Ajuste para impedir multiplos cliques
            event.preventDefault();
            var that = $(this);
            that.off('click');

            $.ajax({
                url: "@Url.Action("Salvar", "Paciente")",
                type: "POST",
                data: $('form').serialize(),
                success: function (result) {

                    var retorno = result.mensagensRetorno;

                    if (retorno.Status) {
                        swal({
                            title: '',
                            text: retorno.MensagemExibicao,
                            type: 'success',
                            confirmButtonColor: '#10386B',
                            allowOutsideClick: false
                        }).then(function () {
                            funcoesIndexTabs.listaPacientes($(".abaPacientes"), false);
                            bootbox.hideAll();
                        });
                    }
                    else {

                        swal({
                            title: '',
                            text: retorno.MensagemExibicao,
                            type: 'warning',
                            confirmButtonColor: '#10386B',
                            allowOutsideClick: false
                        });
                        console.log(retorno.MensagemAnalise);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    validacao.errorAjax(jqXHR, textStatus, errorThrown);
                }
            }).always(function () {
                that.on('click', pacienteGerenciar.salvar); //Devolve a ação do botão
            });
        },

        validar: function () {

            var ehValido = true;

            var nome = $("#nome").val().trim();
            var validaNome = $("#validaNome");

            var cpf = $("#cpf").val().trim();
            var validaCpf = $("#validaCpf");

            var email = $("#email").val().trim();
            var validaEmail = $("#validaEmail");

            var endereco = $("#endereco").val().trim();
            var validaEndereco = $("#validaEndereco");

            var cep = $("#cep").val().trim();
            var validaCep = $("#validaCep");

            var telefone = $("#telefone").val().trim();
            var validaTelefone = $("#validaTelefone");

            var status = $("#status").val();
            var validaStatus = $("#validaStatus");


            if (validacao.campoNulo(nome, validaNome))
                ehValido = false;

            if (validacao.campoNulo(cpf, validaCpf))
                ehValido = false;

            if (validacao.minLenght(cpf, validaCpf, 14, "Cpf inválido!"))
                ehValido = false;

            if (validacao.campoNulo(email, validaEmail))
                ehValido = false;

            if (!validacao.ValidarEmail(email, validaEmail))
                ehValido = false;

            if (validacao.campoNulo(endereco, validaEndereco))
                ehValido = false;

            if (validacao.campoNulo(cep, validaCep))
                ehValido = false;

            if (validacao.minLenght(cep, validaCep, 9, "Cep inválido!"))
                ehValido = false;

            if (validacao.campoNulo(telefone, validaTelefone))
                ehValido = false;

            if (validacao.minLenght(telefone, validaTelefone, 14, "Telefone inválido!"))
                ehValido = false;

            if (validacao.selectSelecionado(status, validaStatus, "Selecione uma Situação"))
                ehValido = false;

            return ehValido;
        },

        closeModal: function () {
            bootbox.hideAll();
        }

    };

    </script>
}
